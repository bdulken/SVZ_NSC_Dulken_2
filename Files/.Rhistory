oligos<-as.vector(read.table("STAR_oligos_updated_09232015.txt")[,1])
allcounts_allcells_nooligo<-allcounts_allcells[,-na.omit(match(oligos,colnames(allcounts_allcells)))]
allcounts_allcells_nooligo<-allcounts_allcells_nooligo[,!grepl("Ast",colnames(allcounts_allcells_nooligo))]
#Filtering for expressed by 5 cells at 10 counts
greaterthan0<-allcounts_allcells_nooligo>10
greaterthan0sum<-rowSums(greaterthan0)
allcounts_allcells_nooligo_genefilt<-allcounts_allcells_nooligo[greaterthan0sum>=5,]
# #Removing cell cycle genes
# setwd("/Volumes/guacamole/scLMV/")
# cellcycle<-as.vector(read.table("cellcyclesymbols.txt")[,1])
# allcounts_allcells_nooligo_genefilt_nocycle<-allcounts_allcells_nooligo_genefilt[-na.omit(match(cellcycle,rownames(allcounts_allcells_nooligo_genefilt))),]
#glm <- DGEList(counts=allcounts_allcells_nooligo_genefilt_nocycle)
glm <- DGEList(counts=allcounts_allcells_nooligo_genefilt)
glm.norm <- calcNormFactors(glm,method="TMM")
load("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files/Katja_exonic_gene_sizes_ERCC92.RData")
names(exonic.gene.sizes) <- tolower(names(exonic.gene.sizes))
ind <- match(tolower(rownames(glm.norm)), names(exonic.gene.sizes))
exonic.gene.sizes.ord <- exonic.gene.sizes[ind]
genes <- data.frame(gene.symbol=rownames(glm.norm),
exonic.size=exonic.gene.sizes.ord)
fpkm_glm_genefilt_nooligo <- rpkm(glm.norm, gene.length=genes$exonic.size,
normalized.lib.sizes=T, log=F)
nbt.data<-data.frame(fpkm_glm_genefilt_nooligo)
# transform data to log scale
# Look at the transformed data matrix
corner(nbt.data)
nbt=new("seurat",raw.data=nbt.data)
# Take all genes in > 3 cells, all cells with > 1k genes, use an expression threshold of 1
# Cell type is encoded in the second _ field, will be stored in nbt@ident and also placed in the "orig.ident" field of object@data.info
nbt<-Setup(nbt,project="NBT",min.cells = 1,min.genes = 500,is.expr=0,do.logNormalize = T)
for(i in seq(0.4,3,0.2)){
nbt<-MeanVarPlot(nbt,y.cutoff = i, x.low.cutoff = 0.25, x.high.cutoff = 5, fxn.x = expMean,fxn.y = logVarDivMean, do.contour = F)
var_genes<-nbt@var.genes
setwd("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files/Ordering")
group1<-as.vector(read.table("group1_10282015_50minModels_quiescent1_consensus_2.txt")[,1])
group2<-as.vector(read.table("group2_10282015_50minModels_active_nondividing_consensus_2.txt")[,1])
group3<-as.vector(read.table("group3_10282015_50minModels_active_dividing_early_consensus_2.txt")[,1])
group4<-as.vector(read.table("group4_10282015_50minModels_active_dividing_late_consensus_2.txt")[,1])
group5<-as.vector(read.table("group5_10282015_50minModels_active_dividing_consensus_2.txt")[,1])
comb_fpkm<-fpkm_glm_genefilt_nooligo
comb_fpkm_col<-vector(length=length(comb_fpkm[1,]),mode="character")
comb_fpkm_col[match(group1,colnames(comb_fpkm))]<-"Group1"
comb_fpkm_col[match(group2,colnames(comb_fpkm))]<-"Group2"
comb_fpkm_col[match(group3,colnames(comb_fpkm))]<-"Group3"
comb_fpkm_col[match(group4,colnames(comb_fpkm))]<-"Group4"
comb_fpkm_col[match(group5,colnames(comb_fpkm))]<-"Group5"
#This pheno vector can be referenced by calling "color_by='type'" in any of the plotting
#functions in monocle to color the cells plotted by their type.
pheno<-comb_fpkm_col
pheno.data.df <- data.frame(type=pheno)
rownames(pheno.data.df) <- colnames(comb_fpkm)
feature<-data.frame(rownames(comb_fpkm))
pd <- new("AnnotatedDataFrame", data = pheno.data.df)
fd <- new("AnnotatedDataFrame", data = feature)
HSMM_q <- newCellDataSet(comb_fpkm, phenoData = pd)
#This is the list of ordering genes which is used to order the qNSCs, all have known roles in the differentiation of neurons,
#and because we have the qNSCs and Astrocytes in this as well I will also use some genes associated with quiescence
HSMM_q <- setOrderingFilter(HSMM_q, var_genes) # Set list of genes for ordering
HSMM_q <- reduceDimension(HSMM_q, use_irlba = F) # Reduce dimensionality
HSMM_q <- orderCells(HSMM_q, num_paths = 1, reverse = T) # Order cells
if(as.character(pData(HSMM_q)[,1])[match(max(pData(HSMM_q)[,2]),pData(HSMM_q)[,2])]=="Group1"){
HSMM_q <- orderCells(HSMM_q, num_paths = 1, reverse = F) # Order cells
}
library(scales)
pseudotime<-pData(HSMM_q)[,2]
pseudotime_mod<-rescale(pseudotime,to=c(0,100))
pData(HSMM_q)[,2]<-pseudotime_mod
setwd("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Figure3_Output/SeuratTest")
#Plotting genes with respect to pseudotime, colored by putative population (qNSC-like, aNSC-early, aNSC-mid, aNSC-late, NPC-like)
my_genes<-c("Atp1a2")
my_genes_ind <- match(my_genes,row.names(subset(fData(HSMM_q))))
cds_subset <- HSMM_q[my_genes_ind, ]
pdf(paste("Atp1a2_saurat_test",i,".pdf",sep=""),height=1.3,width=5.5)
p<-plot_genes_in_pseudotime_mod(cds_subset,color_by="type",cell_size=2,color_custom=c("#9966FF","#c9cc00","#ff9933","#ff3333","#00CCFF"),ncol=1,trend_formula=NULL)
p<-p+theme(axis.line=element_blank())
p<-p+theme(axis.title.y=element_blank())
p<-p+theme(axis.title.x=element_blank())
p<-p+theme(legend.position="none")
print(p)
dev.off()
my_genes<-c("Dlx2")
my_genes_ind <- match(my_genes,row.names(subset(fData(HSMM_q))))
cds_subset <- HSMM_q[my_genes_ind, ]
pdf(paste("Dlx2_saurat_test",i,".pdf",sep=""),height=1.3,width=5.5)
p<-plot_genes_in_pseudotime_mod(cds_subset,color_by="type",cell_size=2,color_custom=c("#9966FF","#c9cc00","#ff9933","#ff3333","#00CCFF"),ncol=1,trend_formula=NULL)
p<-p+theme(axis.line=element_blank())
p<-p+theme(axis.title.y=element_blank())
p<-p+theme(axis.title.x=element_blank())
p<-p+theme(legend.position="none")
print(p)
dev.off()
}
#Reading in NS and specific population cells
#With qNSC With Cell cycle
rm(list=ls())
library(ggplot2)
library(tsne)
library(edgeR)
library(Seurat)
library(monocle)
source("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files/Functions/09282015_plot_spanning_tree_mod.R")
source("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files/Functions/09282015_plot_genes_in_pseudotime_mod.txt")
#Loading all high quality cells and filtering for lowly expressed genes and cell cycle genes
setwd("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files")
allcounts_allcells<-read.table("AllCounts_specPops_read_gene_ERCC_filt_FINAL.txt")
setwd("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files")
oligos<-as.vector(read.table("STAR_oligos_updated_09232015.txt")[,1])
allcounts_allcells_nooligo<-allcounts_allcells[,-na.omit(match(oligos,colnames(allcounts_allcells)))]
allcounts_allcells_nooligo<-allcounts_allcells_nooligo[,!grepl("Ast",colnames(allcounts_allcells_nooligo))]
#Filtering for expressed by 5 cells at 10 counts
greaterthan0<-allcounts_allcells_nooligo>10
greaterthan0sum<-rowSums(greaterthan0)
allcounts_allcells_nooligo_genefilt<-allcounts_allcells_nooligo[greaterthan0sum>=5,]
# #Removing cell cycle genes
# setwd("/Volumes/guacamole/scLMV/")
# cellcycle<-as.vector(read.table("cellcyclesymbols.txt")[,1])
# allcounts_allcells_nooligo_genefilt_nocycle<-allcounts_allcells_nooligo_genefilt[-na.omit(match(cellcycle,rownames(allcounts_allcells_nooligo_genefilt))),]
#glm <- DGEList(counts=allcounts_allcells_nooligo_genefilt_nocycle)
glm <- DGEList(counts=allcounts_allcells_nooligo_genefilt)
glm.norm <- calcNormFactors(glm,method="TMM")
load("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files/Katja_exonic_gene_sizes_ERCC92.RData")
names(exonic.gene.sizes) <- tolower(names(exonic.gene.sizes))
ind <- match(tolower(rownames(glm.norm)), names(exonic.gene.sizes))
exonic.gene.sizes.ord <- exonic.gene.sizes[ind]
genes <- data.frame(gene.symbol=rownames(glm.norm),
exonic.size=exonic.gene.sizes.ord)
fpkm_glm_genefilt_nooligo <- rpkm(glm.norm, gene.length=genes$exonic.size,
normalized.lib.sizes=T, log=F)
nbt.data<-data.frame(fpkm_glm_genefilt_nooligo)
# transform data to log scale
# Look at the transformed data matrix
corner(nbt.data)
nbt=new("seurat",raw.data=nbt.data)
# Take all genes in > 3 cells, all cells with > 1k genes, use an expression threshold of 1
# Cell type is encoded in the second _ field, will be stored in nbt@ident and also placed in the "orig.ident" field of object@data.info
nbt<-Setup(nbt,project="NBT",min.cells = 1,min.genes = 500,is.expr=0,do.logNormalize = T)
for(i in seq(0.4,3,0.2)){
nbt<-MeanVarPlot(nbt,y.cutoff = i, x.low.cutoff = 0.5, x.high.cutoff = 5, fxn.x = expMean,fxn.y = logVarDivMean, do.contour = F)
var_genes<-nbt@var.genes
setwd("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files/Ordering")
group1<-as.vector(read.table("group1_10282015_50minModels_quiescent1_consensus_2.txt")[,1])
group2<-as.vector(read.table("group2_10282015_50minModels_active_nondividing_consensus_2.txt")[,1])
group3<-as.vector(read.table("group3_10282015_50minModels_active_dividing_early_consensus_2.txt")[,1])
group4<-as.vector(read.table("group4_10282015_50minModels_active_dividing_late_consensus_2.txt")[,1])
group5<-as.vector(read.table("group5_10282015_50minModels_active_dividing_consensus_2.txt")[,1])
comb_fpkm<-fpkm_glm_genefilt_nooligo
comb_fpkm_col<-vector(length=length(comb_fpkm[1,]),mode="character")
comb_fpkm_col[match(group1,colnames(comb_fpkm))]<-"Group1"
comb_fpkm_col[match(group2,colnames(comb_fpkm))]<-"Group2"
comb_fpkm_col[match(group3,colnames(comb_fpkm))]<-"Group3"
comb_fpkm_col[match(group4,colnames(comb_fpkm))]<-"Group4"
comb_fpkm_col[match(group5,colnames(comb_fpkm))]<-"Group5"
#This pheno vector can be referenced by calling "color_by='type'" in any of the plotting
#functions in monocle to color the cells plotted by their type.
pheno<-comb_fpkm_col
pheno.data.df <- data.frame(type=pheno)
rownames(pheno.data.df) <- colnames(comb_fpkm)
feature<-data.frame(rownames(comb_fpkm))
pd <- new("AnnotatedDataFrame", data = pheno.data.df)
fd <- new("AnnotatedDataFrame", data = feature)
HSMM_q <- newCellDataSet(comb_fpkm, phenoData = pd)
#This is the list of ordering genes which is used to order the qNSCs, all have known roles in the differentiation of neurons,
#and because we have the qNSCs and Astrocytes in this as well I will also use some genes associated with quiescence
HSMM_q <- setOrderingFilter(HSMM_q, var_genes) # Set list of genes for ordering
HSMM_q <- reduceDimension(HSMM_q, use_irlba = F) # Reduce dimensionality
HSMM_q <- orderCells(HSMM_q, num_paths = 1, reverse = T) # Order cells
if(as.character(pData(HSMM_q)[,1])[match(max(pData(HSMM_q)[,2]),pData(HSMM_q)[,2])]=="Group1"){
HSMM_q <- orderCells(HSMM_q, num_paths = 1, reverse = F) # Order cells
}
library(scales)
pseudotime<-pData(HSMM_q)[,2]
pseudotime_mod<-rescale(pseudotime,to=c(0,100))
pData(HSMM_q)[,2]<-pseudotime_mod
setwd("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Figure3_Output/SeuratTest")
#Plotting genes with respect to pseudotime, colored by putative population (qNSC-like, aNSC-early, aNSC-mid, aNSC-late, NPC-like)
my_genes<-c("Atp1a2")
my_genes_ind <- match(my_genes,row.names(subset(fData(HSMM_q))))
cds_subset <- HSMM_q[my_genes_ind, ]
pdf(paste("Atp1a2_saurat_test_0.5cutoff_",i,".pdf",sep=""),height=1.3,width=5.5)
p<-plot_genes_in_pseudotime_mod(cds_subset,color_by="type",cell_size=2,color_custom=c("#9966FF","#c9cc00","#ff9933","#ff3333","#00CCFF"),ncol=1,trend_formula=NULL)
p<-p+theme(axis.line=element_blank())
p<-p+theme(axis.title.y=element_blank())
p<-p+theme(axis.title.x=element_blank())
p<-p+theme(legend.position="none")
print(p)
dev.off()
my_genes<-c("Dlx2")
my_genes_ind <- match(my_genes,row.names(subset(fData(HSMM_q))))
cds_subset <- HSMM_q[my_genes_ind, ]
pdf(paste("Dlx2_saurat_test_0.5cutoff_",i,".pdf",sep=""),height=1.3,width=5.5)
p<-plot_genes_in_pseudotime_mod(cds_subset,color_by="type",cell_size=2,color_custom=c("#9966FF","#c9cc00","#ff9933","#ff3333","#00CCFF"),ncol=1,trend_formula=NULL)
p<-p+theme(axis.line=element_blank())
p<-p+theme(axis.title.y=element_blank())
p<-p+theme(axis.title.x=element_blank())
p<-p+theme(legend.position="none")
print(p)
dev.off()
}
#Felicia analysis, normalization
rm(list=ls())
library(edgeR)
library(ggplot2)
#Loading all high quality cells and filtering for lowly expressed genes and cell cycle genes
setwd("/Volumes/LaCie/Project_freinitz/STAR/HTseqcounts/")
allpops<-read.table("Felicia_allcounts.txt")
type<-c()
for(i in 1:length(allpops[1,])){
type<-c(type,strsplit(colnames(allpops)[i],split="__")[[1]][1])
}
allpops_agg<-aggregate(t(allpops), by=list(type), FUN=sum)
allpops_agg_t<-t(allpops_agg[,2:length(allpops_agg[1,])])
colnames(allpops_agg_t)<-allpops_agg[,1]
write.table(allpops_agg_t,"Felicia_allpops_aggcounts.txt")
allpops_genecounts<-colSums(allpops_agg_t!=0)
#Filtering for expressed by 5 cells at 10 counts
greaterthan0<-allpops_agg_t>10
greaterthan0sum<-rowSums(greaterthan0)
allpops_genefilt<-allpops_agg_t[greaterthan0sum>=2,]
glm <- DGEList(counts=allpops_genefilt)
glm.norm <- calcNormFactors(glm,method="TMM")
load("/Volumes/guacamole/Software/mm_genomes/mm10/mm10.genes.current.gene.sizes.R")
temp<-(as.numeric(exonic.gene.sizes))
names(temp)<-tolower(names(exonic.gene.sizes))
exonic.gene.sizes<-temp
names(exonic.gene.sizes) <- tolower(names(exonic.gene.sizes))
ind <- match(tolower(rownames(glm.norm)), names(exonic.gene.sizes))
exonic.gene.sizes.ord <- exonic.gene.sizes[ind]
genes <- data.frame(gene.symbol=rownames(glm.norm),
exonic.size=exonic.gene.sizes.ord)
fpkm_glm_genefilt <- rpkm(glm.norm, gene.length=genes$exonic.size,
normalized.lib.sizes=T, log=F)
comb_fpkm<-fpkm_glm_genefilt
comb_fpkm_col<-c("APP_Glasthi","APP_Glastlo","APP_Glasthi","APP_Glastlo",
"APP_USP_Glasthi","APP_USP_Glastlo","APP_USP_Glasthi","APP_USP_Glastlo",
"WT_Glasthi","WT_Glastlo","WT_Glasthi","WT_Glastlo")
#PCA with variable genes
PCA_int<-prcomp(t(log2(comb_fpkm+1)), scale = T, center = T, retx=T)
PCA_results<-PCA_int$x
summa<-summary(PCA_int)
col<-comb_fpkm_col
data<-data.frame(x=PCA_results[,1],y=PCA_results[,2],factors=colnames(comb_fpkm),col=col)
data$factors<-as.character(data$factors)
data$factors <- factor(data$factors, levels=unique(data$factors), ordered = T)
p<-ggplot(data)
#p<-p+geom_text(aes(x=data$x,y=data$y),label=data$factors,color=data$col)
p<-p+geom_point(aes(x=data$x,y=data$y,color=data$col),size=5,alpha=0.65)
p<-p+theme_classic()
p<- p+ labs(y = paste("PC2    (",(round(summa$importance[3,2], digits = 2)-round(summa$importance[3,1],digits = 2))*100,"% of variance)", sep = ""), x =paste("PC1    (",round(summa$importance[3,1],digits = 2)*100,"% of variance)", sep = ""))
p<-p+theme(axis.text.x=element_text(size=20))
p<-p+theme(axis.title.x=element_text(size=24))
p<-p+theme(axis.text.y=element_text(size=20))
p<-p+theme(axis.title.y=element_text(size=24))
p<-p+theme(axis.title.y=element_text(vjust=1))
p<-p+theme(axis.title.x=element_text(vjust=-0.10))
p
pdf("Felicia_Allsamples_PCA.pdf",height=8,width=8)
print(p)
dev.off()
fac1<-c(rep(c(rep("Glasthi",2),rep("Glastlow",2)),3))
fac2<-c(rep("APP",4),rep("APP_USP",4),rep("WT",4))
design<-model.matrix(~fac1+fac2)
y <- estimateDisp(glm.norm, design)
design<-model.matrix(~fac1)
fit <- glmFit(y, design)
lrt.2vs1 <- glmLRT(fit,contrast=c(1,-1))
topTags(lrt.2vs1,n=200)
library(edgeR)
fac1<-c(rep(c(rep("Glasthi",2),rep("Glastlow",2)),3))
fac2<-c(rep("APP",4),rep("APP_USP",4),rep("WT",4))
design<-model.matrix(~fac1+fac2)
y <- estimateDisp(glm.norm, design)
library(locfit)
rm(list=ls())
library(edgeR)
library(ggplot2)
#Loading all high quality cells and filtering for lowly expressed genes and cell cycle genes
setwd("/Volumes/LaCie/Sydney/Raw_Data/STAR/HTseqcounts/")
allpops<-read.table("Sydney_allcounts.txt")
allpops_genecounts<-colSums(allpops!=0)
#Filtering for expressed by 5 cells at 10 counts
greaterthan0<-allpops>10
greaterthan0sum<-rowSums(greaterthan0)
allpops_genefilt<-allpops[greaterthan0sum>=2,]
glm <- DGEList(counts=allpops_genefilt)
glm.norm <- calcNormFactors(glm,method="TMM")
load("/Volumes/guacamole/Software/mm_genomes/mm10/mm10.genes.current.gene.sizes.R")
temp<-(as.numeric(exonic.gene.sizes))
names(temp)<-tolower(names(exonic.gene.sizes))
exonic.gene.sizes<-temp
names(exonic.gene.sizes) <- tolower(names(exonic.gene.sizes))
ind <- match(tolower(rownames(glm.norm)), names(exonic.gene.sizes))
exonic.gene.sizes.ord <- exonic.gene.sizes[ind]
genes <- data.frame(gene.symbol=rownames(glm.norm),
exonic.size=exonic.gene.sizes.ord)
fpkm_glm_genefilt <- rpkm(glm.norm, gene.length=genes$exonic.size,
normalized.lib.sizes=T, log=F)
comb_fpkm<-fpkm_glm_genefilt
comb_fpkm_col<-c(rep(c("Pd1_neg","Pd1_pos"),3))
write.table(comb_fpkm,"genefilt_fpkmnorm_Sydney.txt")
#PCA
PCA_int<-prcomp(t(log2(comb_fpkm+1)), scale = T, center = T, retx=T)
PCA_results<-PCA_int$x
summa<-summary(PCA_int)
col<-comb_fpkm_col
data<-data.frame(x=PCA_results[,1],y=PCA_results[,2],factors=colnames(comb_fpkm),col=col)
data$factors<-as.character(data$factors)
data$factors <- factor(data$factors, levels=unique(data$factors), ordered = T)
p<-ggplot(data)
#p<-p+geom_text(aes(x=data$x,y=data$y),label=data$factors,color=data$col)
p<-p+geom_point(aes(x=data$x,y=data$y,color=data$col),size=5,alpha=0.65)
p<-p+theme_classic()
p<- p+ labs(y = paste("PC2    (",(round(summa$importance[3,2], digits = 2)-round(summa$importance[3,1],digits = 2))*100,"% of variance)", sep = ""), x =paste("PC1    (",round(summa$importance[3,1],digits = 2)*100,"% of variance)", sep = ""))
p<-p+theme(axis.text.x=element_text(size=20))
p<-p+theme(axis.title.x=element_text(size=24))
p<-p+theme(axis.text.y=element_text(size=20))
p<-p+theme(axis.title.y=element_text(size=24))
p<-p+theme(axis.title.y=element_text(vjust=1))
p<-p+theme(axis.title.x=element_text(vjust=-0.10))
p
pdf("Sydney_Allsamples_PCA.pdf",height=8,width=8)
print(p)
dev.off()
fac1<-c(rep(c("Pd1_neg","Pd1_pos"),3))
design<-model.matrix(~0+fac1)
y <- estimateDisp(glm.norm, design)
design<-model.matrix(~0+fac1)
fit <- glmFit(y, design)
lrt.2vs1 <- glmLRT(fit,contrast=c(1,-1))
topTags(lrt.2vs1,n=200)
biocLite("locfit")
rm(list=ls())
library(edgeR)
library(ggplot2)
library(locfit)
#Loading all high quality cells and filtering for lowly expressed genes and cell cycle genes
setwd("/Volumes/LaCie/Sydney/Raw_Data/STAR/HTseqcounts/")
allpops<-read.table("Sydney_allcounts.txt")
allpops_genecounts<-colSums(allpops!=0)
#Filtering for expressed by 5 cells at 10 counts
greaterthan0<-allpops>10
greaterthan0sum<-rowSums(greaterthan0)
allpops_genefilt<-allpops[greaterthan0sum>=2,]
glm <- DGEList(counts=allpops_genefilt)
glm.norm <- calcNormFactors(glm,method="TMM")
load("/Volumes/guacamole/Software/mm_genomes/mm10/mm10.genes.current.gene.sizes.R")
temp<-(as.numeric(exonic.gene.sizes))
names(temp)<-tolower(names(exonic.gene.sizes))
exonic.gene.sizes<-temp
names(exonic.gene.sizes) <- tolower(names(exonic.gene.sizes))
ind <- match(tolower(rownames(glm.norm)), names(exonic.gene.sizes))
exonic.gene.sizes.ord <- exonic.gene.sizes[ind]
genes <- data.frame(gene.symbol=rownames(glm.norm),
exonic.size=exonic.gene.sizes.ord)
fpkm_glm_genefilt <- rpkm(glm.norm, gene.length=genes$exonic.size,
normalized.lib.sizes=T, log=F)
comb_fpkm<-fpkm_glm_genefilt
comb_fpkm_col<-c(rep(c("Pd1_neg","Pd1_pos"),3))
write.table(comb_fpkm,"genefilt_fpkmnorm_Sydney.txt")
#PCA
PCA_int<-prcomp(t(log2(comb_fpkm+1)), scale = T, center = T, retx=T)
PCA_results<-PCA_int$x
summa<-summary(PCA_int)
col<-comb_fpkm_col
data<-data.frame(x=PCA_results[,1],y=PCA_results[,2],factors=colnames(comb_fpkm),col=col)
data$factors<-as.character(data$factors)
data$factors <- factor(data$factors, levels=unique(data$factors), ordered = T)
p<-ggplot(data)
#p<-p+geom_text(aes(x=data$x,y=data$y),label=data$factors,color=data$col)
p<-p+geom_point(aes(x=data$x,y=data$y,color=data$col),size=5,alpha=0.65)
p<-p+theme_classic()
p<- p+ labs(y = paste("PC2    (",(round(summa$importance[3,2], digits = 2)-round(summa$importance[3,1],digits = 2))*100,"% of variance)", sep = ""), x =paste("PC1    (",round(summa$importance[3,1],digits = 2)*100,"% of variance)", sep = ""))
p<-p+theme(axis.text.x=element_text(size=20))
p<-p+theme(axis.title.x=element_text(size=24))
p<-p+theme(axis.text.y=element_text(size=20))
p<-p+theme(axis.title.y=element_text(size=24))
p<-p+theme(axis.title.y=element_text(vjust=1))
p<-p+theme(axis.title.x=element_text(vjust=-0.10))
p
pdf("Sydney_Allsamples_PCA.pdf",height=8,width=8)
print(p)
dev.off()
fac1<-c(rep(c("Pd1_neg","Pd1_pos"),3))
design<-model.matrix(~0+fac1)
y <- estimateDisp(glm.norm, design)
design<-model.matrix(~0+fac1)
fit <- glmFit(y, design)
lrt.2vs1 <- glmLRT(fit,contrast=c(1,-1))
topTags(lrt.2vs1,n=200)
summary(decideTestsDGE(lrt.2vs1))
tests<-decideTestsDGE(lrt.2vs1)
tests_neg<-lrt.2vs1$table[tests==1,]
tests_neg_sort<-tests_neg[order(tests_neg[,4]),]
tests_pos<-lrt.2vs1$table[tests==-1,]
tests_pos_sort<-tests_pos[order(tests_pos[,4]),]
write.table(tests_neg_sort,"Enriched_in_PD1_neg_p05.txt")
write.table(tests_pos_sort,"Enriched_in_PD1_pos_p05.txt")
table<-lrt.2vs1$table
table_sort<-table[order(table[,1]),]
#Felicia analysis, normalization
rm(list=ls())
library(edgeR)
library(ggplot2)
#Loading all high quality cells and filtering for lowly expressed genes and cell cycle genes
setwd("/Volumes/LaCie/Project_freinitz/STAR/HTseqcounts/")
allpops<-read.table("Felicia_allcounts.txt")
type<-c()
for(i in 1:length(allpops[1,])){
type<-c(type,strsplit(colnames(allpops)[i],split="__")[[1]][1])
}
allpops_agg<-aggregate(t(allpops), by=list(type), FUN=sum)
allpops_agg_t<-t(allpops_agg[,2:length(allpops_agg[1,])])
colnames(allpops_agg_t)<-allpops_agg[,1]
write.table(allpops_agg_t,"Felicia_allpops_aggcounts.txt")
allpops_genecounts<-colSums(allpops_agg_t!=0)
#Filtering for expressed by 5 cells at 10 counts
greaterthan0<-allpops_agg_t>10
greaterthan0sum<-rowSums(greaterthan0)
allpops_genefilt<-allpops_agg_t[greaterthan0sum>=2,]
glm <- DGEList(counts=allpops_genefilt)
glm.norm <- calcNormFactors(glm,method="TMM")
load("/Volumes/guacamole/Software/mm_genomes/mm10/mm10.genes.current.gene.sizes.R")
temp<-(as.numeric(exonic.gene.sizes))
names(temp)<-tolower(names(exonic.gene.sizes))
exonic.gene.sizes<-temp
names(exonic.gene.sizes) <- tolower(names(exonic.gene.sizes))
ind <- match(tolower(rownames(glm.norm)), names(exonic.gene.sizes))
exonic.gene.sizes.ord <- exonic.gene.sizes[ind]
genes <- data.frame(gene.symbol=rownames(glm.norm),
exonic.size=exonic.gene.sizes.ord)
fpkm_glm_genefilt <- rpkm(glm.norm, gene.length=genes$exonic.size,
normalized.lib.sizes=T, log=F)
comb_fpkm<-fpkm_glm_genefilt
comb_fpkm_col<-c("APP_Glasthi","APP_Glastlo","APP_Glasthi","APP_Glastlo",
"APP_USP_Glasthi","APP_USP_Glastlo","APP_USP_Glasthi","APP_USP_Glastlo",
"WT_Glasthi","WT_Glastlo","WT_Glasthi","WT_Glastlo")
#PCA with variable genes
PCA_int<-prcomp(t(log2(comb_fpkm+1)), scale = T, center = T, retx=T)
PCA_results<-PCA_int$x
summa<-summary(PCA_int)
col<-comb_fpkm_col
data<-data.frame(x=PCA_results[,1],y=PCA_results[,2],factors=colnames(comb_fpkm),col=col)
data$factors<-as.character(data$factors)
data$factors <- factor(data$factors, levels=unique(data$factors), ordered = T)
p<-ggplot(data)
#p<-p+geom_text(aes(x=data$x,y=data$y),label=data$factors,color=data$col)
p<-p+geom_point(aes(x=data$x,y=data$y,color=data$col),size=5,alpha=0.65)
p<-p+theme_classic()
p<- p+ labs(y = paste("PC2    (",(round(summa$importance[3,2], digits = 2)-round(summa$importance[3,1],digits = 2))*100,"% of variance)", sep = ""), x =paste("PC1    (",round(summa$importance[3,1],digits = 2)*100,"% of variance)", sep = ""))
p<-p+theme(axis.text.x=element_text(size=20))
p<-p+theme(axis.title.x=element_text(size=24))
p<-p+theme(axis.text.y=element_text(size=20))
p<-p+theme(axis.title.y=element_text(size=24))
p<-p+theme(axis.title.y=element_text(vjust=1))
p<-p+theme(axis.title.x=element_text(vjust=-0.10))
p
pdf("Felicia_Allsamples_PCA.pdf",height=8,width=8)
print(p)
dev.off()
library(edgeR)
library(locfit)
fac1<-c(rep(c(rep("Glasthi",2),rep("Glastlow",2)),3))
fac2<-c(rep("APP",4),rep("APP_USP",4),rep("WT",4))
design<-model.matrix(~fac1+fac2)
y <- estimateDisp(glm.norm, design)
design<-model.matrix(~fac1)
fit <- glmFit(y, design)
lrt.2vs1 <- glmLRT(fit,contrast=c(1,-1))
topTags(lrt.2vs1,n=200)
getSlots(nbt)
#This program generates pseudotime dependent gene expression plots for various genes colored by their putative molecular subgroup
# For Figures 3A, 3F, S3B, S3C
rm(list=ls())
library(edgeR)
library(monocle)
source("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files/Functions/09282015_plot_spanning_tree_mod.R")
source("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files/Functions/09282015_plot_genes_in_pseudotime_mod.txt")
# ====================================================================================================
#Loading all high quality cells and filtering for lowly expressed genes and cell cycle genes
setwd("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files")
spec_pops<-read.table("AllCounts_specPops_read_gene_ERCC_filt_FINAL.txt")
allcounts_allcells<-spec_pops
setwd("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files")
oligos<-as.vector(read.table("STAR_oligos_updated_09232015.txt")[,1])
allcounts_allcells_nooligo<-allcounts_allcells[,-na.omit(match(oligos,colnames(allcounts_allcells)))]
#remove astrocytes for regression learning
allcounts_allcells_nooligo_noast<-allcounts_allcells_nooligo[,!grepl("Ast",colnames(allcounts_allcells_nooligo))]
#Filtering for expressed by 5 cells at 10 counts
greaterthan0<-allcounts_allcells_nooligo_noast>10
greaterthan0sum<-rowSums(greaterthan0)
allcounts_allcells_nooligo_noast_genefilt<-allcounts_allcells_nooligo_noast[greaterthan0sum>=5,]
glm <- DGEList(counts=allcounts_allcells_nooligo_noast_genefilt)
glm.norm <- calcNormFactors(glm,method="TMM")
load("/Volumes/guacamole/Software/Final Scripts for Paper _ 01152015/Files/Katja_exonic_gene_sizes_ERCC92.RData")
names(exonic.gene.sizes) <- tolower(names(exonic.gene.sizes))
ind <- match(tolower(rownames(glm.norm)), names(exonic.gene.sizes))
exonic.gene.sizes.ord <- exonic.gene.sizes[ind]
genes <- data.frame(gene.symbol=rownames(glm.norm),
exonic.size=exonic.gene.sizes.ord)
fpkm_glm_genefilt_nooligo <- rpkm(glm.norm, gene.length=genes$exonic.size,
normalized.lib.sizes=T, log=F)
fpkm_glm_cellcycle<-fpkm_glm_genefilt_nooligo[match(c("Mki67","Cdk1","Cdk4","Ccna2","Ccnb1"))]
fpkm_glm_cellcycle<-fpkm_glm_genefilt_nooligo[match(c("Mki67","Cdk1","Cdk4","Ccna2","Ccnb1"),rownames(fpkm_glm_genefilt_nooligo)),]
fpkm_glm_cellcycle[1,]
fpkm_glm_cellcycle[,1]
cellcyclehigh<-colSums(fpkm_glm_cellcycle>0)
cellcyclehigh
cellcyclehigh<-colSums(fpkm_glm_cellcycle>0)>2
cellcyclehigh
cellcyclehigh<-colSums(fpkm_glm_cellcycle>0)%>%>2
cellcyclehigh<-colnames(fpkm_glm_cellcycle)[colSums(fpkm_glm_cellcycle>0)>2]
cellcyclehigh
fpkm_glm_cellcyclehigh<-fpkm_glm_genefilt_nooligo[,match(cellcyclehigh,colnames(fpkm_glm_genefilt_nooligo))]
